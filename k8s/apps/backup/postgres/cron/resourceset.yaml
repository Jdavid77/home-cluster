apiVersion: fluxcd.controlplane.io/v1
kind: ResourceSet
metadata:
  name: postgresbackup
  annotations:
    fluxcd.controlplane.io/reconcile: "enabled"
    fluxcd.controlplane.io/reconcileEvery: "30m"
    fluxcd.controlplane.io/reconcileTimeout: "5m"
spec:
  wait: true
  inputs:
    - backend: minio
      region: weur
      bucket: postgres
      endpoint: http://minio.storage.svc.cluster.local:9000
      encryption: false
      server_version: 17
      server_port: 5432
      server_name: main
    - backend: minio
      region: weur
      bucket: postgres
      endpoint: http://minio.storage.svc.cluster.local:9000
      encryption: false
      server_version: 16
      server_port: 6001
      server_name: immich
    - backend: b2
      region: eu-central-003
      bucket: jnobrega-postgres-backup
      endpoint: https://s3.eu-central-003.backblazeb2.com
      encryption: true
      server_version: 17
      server_port: 5432
      server_name: main
    - backend: b2
      region: eu-central-003
      bucket: jnobrega-postgres-backup
      endpoint: https://s3.eu-central-003.backblazeb2.com
      encryption: true
      server_version: 16
      server_port: 6001
      server_name: immich
  resourcesTemplate: |
    ---
    apiVersion: external-secrets.io/v1
    kind: ExternalSecret
    metadata:
      name: &secret postgres-backup-<< inputs.server_name >>-<< inputs.backend >>
      namespace: backup
    spec:
      refreshInterval: 5m
      secretStoreRef:
        kind: ClusterSecretStore
        name: akeyless-secret-store
      target:
        name: *secret
        template:
          engineVersion: v2
          data:
            POSTGRES_USER: "{{ .POSTGRES_SUPER_USER }}"
            POSTGRES_PASSWORD: "{{ .POSTGRES_SUPER_PASS }}"
            S3_ACCESS_KEY_ID: "{{ .S3_ACCESS_KEY_ID }}"
            S3_SECRET_ACCESS_KEY: "{{ .S3_SECRET_ACCESS_KEY }}"
            <<- if inputs.encryption >>
            ENCRYPTION_PASSWORD: "{{ .ENCRYPTION_PASSWORD }}"
            <<- end >>
      dataFrom:
        - extract:
            key: /postgres/<< inputs.backend >>
        - extract:
            key: /postgres/super-user
    ---
    apiVersion: helm.toolkit.fluxcd.io/v2
    kind: HelmRelease
    metadata:
      name: pg-backup-<< inputs.backend >>
      namespace: backup
    spec:
      interval: 5m
      chartRef:
        kind: OCIRepository
        name: app-template
        namespace: flux-system
      install:
        remediation:
          retries: 3
      upgrade:
        cleanupOnFail: true
        remediation:
          strategy: rollback
          retries: 3
      values:
        defaultPodOptions:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            seccompProfile: {type: RuntimeDefault}
        controllers:
          pg-backup-s3:
            type: cronjob
            cronjob:
              suspend: false
              concurrencyPolicy: Forbid
              timeZone: ${TIMEZONE}
              schedule: "0 0 * * 0"
              startingDeadlineSeconds: 30
              successfulJobsHistory: 1
              failedJobsHistory: 1
              backoffLimit: 3
              parallelism: 0
            containers:
              app:
                image:
                  repository: ghcr.io/jdavid77/pg-backup-s3
                  tag: pg<< inputs.server_version >>
                  pullPolicy: AlwaysPull
                env:
                  S3_REGION: << inputs.region >>
                  S3_BUCKET: << inputs.bucket >>
                  S3_PREFIX: "backup"
                  S3_ENDPOINT: << inputs.endpoint >>
                  SERVER_NAME: << inputs.server_name >>
                  POSTGRES_BACKUP_ALL: "true"
                  POSTGRES_HOST: "${NFS_SERVER}"
                  POSTGRES_EXTRA_OPTS: "--schema=public --blobs"
                  POSTGRES_PORT: << inputs.server_port >>
                  REMOVE_BEFORE: "15"
                envFrom:
                  - secretRef:
                      name: postgres-backup-<< inputs.backend >>
