apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 48.2.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    fullnameOverride: prometheus
    alertmanager:
      enable: true
      config:
        global:
          resolve_timeout: 5m
        receivers:
        - name: 'null'
        - name: 'pushover'
          pushover_configs:
            - send_resolved: true
              retry: 20m
              user_key: ${PUSHOVER_USER_KEY}
              token: ${PUSHOVER_TOKEN}
              title: |-
                [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
              message: >-
                {{ range .Alerts -}}
                  *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

                *Details:*
                  {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                  {{ end }}
                {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 45s
          group_interval: 10m
          repeat_interval: 12h
          receiver: 'pushover'
          routes:
            - receiver: "null" # quote
              matchers:
                - alertname =~ "Watchdog"
            - receiver: "null" # quote
              matchers:
                - alertname =~ "InfoInhibitor"
            # - receiver: 'pagerduty'
            #   matchers:
            #     - severity = "critical"
            #   continue: true
            - receiver: 'pushover'
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
          
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: traefik
        annotations:
          external-dns.alpha.kubernetes.io/hostname: alerts.${SECRET_DOMAIN}
          external-dns.alpha.kubernetes.io/target: ${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-cloudflare-realip@kubernetescrd
          hajimari.io/enable: "true"
          hajimari.io/icon: "alert"
        hosts:
          - &host alerts.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host
            secretName: ${SECRET_DOMAIN}-tls
      alertmanagerSpec:
        replicas: 1
        podAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 10Mi
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 60m
            memory: 64Mi
    grafana:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    prometheusOperator:
      configReloaderCpu: 0
    prometheus-node-exporter:
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - sourceLabels: [__meta_kubernetes_pod_node_name]
              separator: ;
              regex: ^(.*)$
              targetLabel: nodename
              replacement: $1
              action: replace
    prometheus:
      ingress:
        enabled: false
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 120d
        enableAdminAPI: true
        walCompression: true
        enableFeatures: ["remote-write-receiver"]
        alertingEndpoints:
          - name: alertmanager
            namespace: monitoring
            port: web
            scheme: http
            apiVersion: v1
      alertmanagerSpec:
        retention: 100d
    defaultRules:
      create: true
      rules:
        # disable master node components
        kubeProxy: false
        kubeScheduler: false
    kubeControllerManager:
      enabled: false
