---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALHELPER_CLUSTER_DIR: '{{.KUBERNETES_DIR}}/infrastructure/talos/clusterconfig'
  TALHELPER_CONFIG_FILE: '{{.KUBERNETES_DIR}}/infrastructure/talos/talconfig.yaml'
  TALHELPER_SECRET_FILE: '{{.KUBERNETES_DIR}}/infrastructure/talos/talsecret.sops.yaml'
  TALOSCONFIG: '{{.TALHELPER_CLUSTER_DIR}}/talosconfig'

env:
  TALOSCONFIG: '{{.TALOSCONFIG}}'

tasks:

  generate-config:
    desc: Generate Talos configuration
    cmds: 
      - talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper

  apply-node:
    desc: Apply Talos config to a node [HOSTNAME=required]
    cmds:
      - talosctl --nodes {{.HOSTNAME}} apply-config --mode={{.MODE}} --file {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
    vars:
      CLUSTER_NAME:
        sh: yq '.clusterName' {{.TALHELPER_CONFIG_FILE}}
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [HOSTNAME]
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null
      - talosctl config info &>/dev/null
      - test -f {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  upgrade-node:
    desc: Upgrade Talos on a single node [HOST_IP=required]
    cmds:
      - task: down
      - talosctl --nodes {{.HOST_IP}} upgrade --image="factory.talos.dev/installer{{if eq .TALOS_SECUREBOOT "true"}}-secureboot{{end}}/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --timeout=20m --preserve
      - talosctl --nodes {{.HOST_IP}} health --wait-timeout=10m --server=false
      - task: up
    vars:
      TALOS_SCHEMATIC_ID:
        sh: |-
          HOSTNAME=$(kubectl get nodes -o wide --no-headers | grep {{.HOST_IP}} | awk '{print $1}')
          kubectl get node {{.HOSTNAME}} --output=jsonpath='{.metadata.annotations.extensions\.talos\.dev/schematic}'
      TALOS_SECUREBOOT:
        sh: talosctl --nodes {{.HOST_IP}} get securitystate --output=jsonpath='{.spec.secureBoot}'
      TALOS_VERSION:
        sh: yq '.talosVersion' {{.TALHELPER_CONFIG_FILE}}
    requires:
      vars: [HOST_IP]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/{{.TALOS_VERSION}}
      - talosctl --nodes {{.HOST_IP}} get machineconfig &>/dev/null
      - talosctl config info &>/dev/null
      - test -f {{.TALOSCONFIG}}
      - which kubectl talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.KUBERNETES_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}
      - talosctl --nodes {{.KUBERNETES_CONTROLLER}} get machineconfig &>/dev/null
      - talosctl config info &>/dev/null
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  down:
    internal: true
    cmd: flux --namespace flux-system suspend kustomization --all
    preconditions:
      - which flux

  up:
    internal: true
    cmd: flux --namespace flux-system resume kustomization --all
    preconditions:
      - which flux